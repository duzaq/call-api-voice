# Configurações globais
log_level=3
log_stderror=yes

# Módulos a serem carregados
loadmodule "kemi.so"
loadmodule "signaling.so"
loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfgutils.so"
loadmodule "acc.so"
loadmodule "http_client.so"
loadmodule "json.so"
loadmodule "rtpengine.so"
loadmodule "udp.so" # Carrega o módulo UDP

#  MODULES PARAMETERS
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 0)
modparam("maxfwd", "max_limit", 70)
modparam("rtpengine", "rtpengine_sock", "udp:rtpengine:2222")

# Configuração do socket
listen=udp:0.0.0.0:5060 as opensips_1
port=5060

# Roteamento básico
route {
    # Verifica o número máximo de encaminhamentos
    if (!mf_process_maxfwd_header("10")) {
        xlog("L_ERR", "Too many hops\n");
        sl_send_reply("483", "Too Many Hops");
        exit;
    }

    if (!sanity_check("1511", "7")) {
        xlog("Malformed SIP message detected\n");
        exit;
    }

    # REQUEST PROCESSING
    if (is_method("INVITE")) {

        # Extrair informações da chamada
        $var(caller) = $(fU);
        $var(callee) = $(rU);

        # Gerar um nome de arquivo único para o áudio temporário
        $var(unique_id) = $(uuid);
        $var(audio_filename) = $var(unique_id) + ".wav";
        $var(audio_url) = $temp_audio_base_url + "/" + $var(audio_filename);

        xlog("L_INFO", "Caller: $var(caller), Callee: $var(callee), Audio URL: $var(audio_url)\n");

        # Construir o corpo da requisição JSON
        $json_data = json_encode("caller", $var(caller));
        $json_data = json_merge($json_data, json_encode("callee", $var(callee)));
        $json_data = json_merge($json_data, json_encode("audio_url", $var(audio_url)));

        # Enviar requisição POST para o aplicativo Flask
        if (!http_client_query("POST", "http://app:5060/sip/call", "application/json", $json_data, "$var(response)")) {
            xlog("L_ERR", "Failed to send request to Flask app\n");
            sl_send_reply("500", "Internal Server Error");
            exit;
        }

        xlog("L_INFO", "Response from Flask app: $var(response)\n");

        # Analisar a resposta JSON
        if (!json_parse($var(response), "$var(response_json)")) {
            xlog("L_ERR", "Failed to parse JSON response\n");
            sl_send_reply("500", "Internal Server Error");
            exit;
        }

        # Extrair o URL do áudio de resposta
        $var(response_audio_file) = json_get("$var(response_json)", "audio_file");
        
        # Extrair o texto de resposta
        $var(response_text) = json_get("$var(response_json)", "response");
        xlog("L_INFO", "Response text: $var(response_text)\n");

        # Reproduzir o áudio de resposta usando o rtpengine
        if (rtpengine_offer()) {
            xlog("L_INFO", "RTPengine offer successful\n");

            # Verifica se o URL do áudio de resposta não está vazio
            if ($var(response_audio_file) != "") {
                xlog("L_INFO", "Playing audio: $var(response_audio_file)\n");

                # Adicione mais logs para depurar rtpengine_play
                if (rtpengine_play("$var(response_audio_file)")) {
                    xlog("L_INFO", "rtpengine_play command executed successfully\n");
                } else {
                    xlog("L_ERR", "rtpengine_play command failed\n");
                }

            } else {
                xlog("L_ERR", "Response audio URL is empty\n");
                sl_send_reply("500", "Internal Server Error");
                exit;
            }

        } else {
            xlog("L_ERR", "RTPengine offer failed\n");
            sl_send_reply("500", "Internal Server Error");
            exit;
        }
    } else if (is_method("ACK")) {
        if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    # Handle BYE to release RTPengine resources
    if (is_method("BYE")) {
        if (rtpengine_delete()) {
            xlog("L_INFO", "RTPengine session deleted successfully\n");
        } else {
            xlog("L_ERR", "Failed to delete RTPengine session\n");
        }
    }

    # ROUTING LOGIC (DEFAULT FORWARD)
    if (!t_relay()) {
        sl_reply_error();
    };
}

# FAILURE ROUTE (Handle SIP failures)
failure_route[1] {
    if (t_is_canceled()) {
        exit;
    }
}
